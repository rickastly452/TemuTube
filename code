import { useState, useEffect, useRef } from "react";
import { Search, Upload, Play, User, LogOut, Home, Menu, Heart, Share } from "lucide-react";

// Supabase configuration - using your project
const SUPABASE_URL = "https://colcfcjxhczrzakawzva.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNvbGNmY2p4aGN6cnpha2F3enZhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTgxMzY0MzUsImV4cCI6MjAzMzcxMjQzNX0.5KXJxJQ9JQ9JQ9JQ9JQ9JQ9JQ9JQ9JQ9JQ9JQ9JQ9JQ";

// Types
interface User {
  id: string;
  username: string;
  email: string;
  created_at: string;
}

interface Video {
  id: string;
  title: string;
  description: string;
  url: string;
  thumbnail: string;
  uploader: string;
  uploader_id: string;
  views: number;
  created_at: string;
  duration: string;
  likes: number;
}

export default function YouTubeClone() {
  // State
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [isLogin, setIsLogin] = useState(true);
  const [authForm, setAuthForm] = useState({
    username: "",
    email: "",
    password: "",
  });
  const [videos, setVideos] = useState<Video[]>([]);
  const [currentVideo, setCurrentVideo] = useState<Video | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [isUploading, setIsUploading] = useState(false);
  const [activeTab, setActiveTab] = useState("home");
  const [isLoading, setIsLoading] = useState(true);
  const [uploadForm, setUploadForm] = useState({
    title: "",
    description: "",
    file: null as File | null,
  });

  const videoRef = useRef<HTMLVideoElement>(null);

  // Initialize Supabase
  useEffect(() => {
    const initSupabase = async () => {
      try {
        // Dynamically import Supabase to avoid SSR issues
        const { createClient } = await import('@supabase/supabase-js');
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        // Store supabase client in window for global access
        (window as any).supabase = supabase;
        
        // Check if user is already logged in
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
          const { data, error } = await supabase
            .from('users')
            .select('*')
            .eq('id', user.id)
            .single();
          
          if (!error && data) {
            setCurrentUser({
              id: data.id,
              username: data.username,
              email: data.email,
              created_at: data.created_at
            });
          }
        }
        
        // Load videos
        await loadVideos();
        setIsLoading(false);
      } catch (error) {
        console.error("Supabase initialization error:", error);
        setIsLoading(false);
      }
    };

    initSupabase();
  }, []);

  // Load videos from Supabase
  const loadVideos = async () => {
    const supabase = (window as any).supabase;
    if (!supabase) return;
    
    try {
      const { data, error } = await supabase
        .from('videos')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (!error && data) {
        setVideos(data.map((v: any) => ({
          ...v,
          uploader_id: v.uploader_id,
          created_at: v.created_at
        })));
      }
    } catch (error) {
      console.error("Error loading videos:", error);
    }
  };

  // Handle authentication
  const handleAuthSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const supabase = (window as any).supabase;
    if (!supabase) {
      alert("Supabase not initialized. Please check your configuration.");
      return;
    }
    
    try {
      if (isLogin) {
        // Login
        const { data, error } = await supabase.auth.signInWithPassword({
          email: authForm.email,
          password: authForm.password,
        });
        
        if (error) throw error;
        
        // Get user data
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('*')
          .eq('id', data.user.id)
          .single();
        
        if (userError) throw userError;
        
        setCurrentUser({
          id: userData.id,
          username: userData.username,
          email: userData.email,
          created_at: userData.created_at
        });
      } else {
        // Register
        const { data, error } = await supabase.auth.signUp({
          email: authForm.email,
          password: authForm.password,
          options: {
            data: {
              username: authForm.username
            }
          }
        });
        
        if (error) throw error;
        
        // Create user profile if email confirmed
        if (data.user) {
          // In a real app, you'd handle email confirmation
          // For this demo, we'll create the profile immediately
          const { error: insertError } = await supabase
            .from('users')
            .insert({
              id: data.user.id,
              username: authForm.username,
              email: authForm.email
            });
          
          if (insertError && insertError.code !== '23505') {
            // Ignore duplicate key error (user already exists)
            throw insertError;
          }
          
          setCurrentUser({
            id: data.user.id,
            username: authForm.username,
            email: authForm.email,
            created_at: new Date().toISOString()
          });
        }
      }
      
      // Reset form
      setAuthForm({ username: "", email: "", password: "" });
    } catch (error: any) {
      alert(`Authentication error: ${error.message}`);
    }
  };

  // Handle logout
  const handleLogout = async () => {
    const supabase = (window as any).supabase;
    if (!supabase) return;
    
    await supabase.auth.signOut();
    setCurrentUser(null);
    setCurrentVideo(null);
    setActiveTab("home");
  };

  // Handle video upload
  const handleUploadSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!uploadForm.file || !uploadForm.title || !currentUser) return;
    
    const supabase = (window as any).supabase;
    if (!supabase) {
      alert("Supabase not initialized");
      return;
    }
    
    setIsUploading(true);
    
    try {
      // Upload video file to Supabase Storage
      const fileName = `${Date.now()}-${uploadForm.file.name}`;
      const { error: uploadError } = await supabase.storage
        .from('videos')
        .upload(fileName, uploadForm.file, {
          cacheControl: '3600',
          upsert: false
        });
      
      if (uploadError) throw uploadError;
      
      // Get public URL for the video
      const { data: { publicUrl } } = supabase.storage
        .from('videos')
        .getPublicUrl(fileName);
      
      // Create video record
      const newVideo = {
        title: uploadForm.title,
        description: uploadForm.description,
        url: publicUrl,
        thumbnail: `https://placehold.co/320x180/10b981/white?text=${encodeURIComponent(uploadForm.title.substring(0, 15))}`,
        uploader: currentUser.username,
        uploader_id: currentUser.id,
        views: 0,
        duration: "0:00",
        likes: 0
      };
      
      const { error: insertError } = await supabase
        .from('videos')
        .insert(newVideo);
      
      if (insertError) throw insertError;
      
      // Refresh videos
      await loadVideos();
      
      // Reset form and state
      setUploadForm({ title: "", description: "", file: null });
      setIsUploading(false);
      
      // Close modal
      const modal = document.getElementById('upload-modal');
      if (modal) modal.classList.add('hidden');
      
      alert("Video uploaded successfully!");
    } catch (error: any) {
      console.error("Upload error:", error);
      alert(`Upload failed: ${error.message}`);
      setIsUploading(false);
    }
  };

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setUploadForm({
        ...uploadForm,
        file: e.target.files[0],
      });
    }
  };

  // Filter videos based on search
  const getFilteredVideos = () => {
    if (!searchQuery) return videos;
    
    return videos.filter(video => 
      video.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      video.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      video.uploader.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  // Play video
  const playVideo = (video: Video) => {
    setCurrentVideo(video);
    setActiveTab("watch");
    if (videoRef.current) {
      videoRef.current.load();
    }
  };

  // Format view count
  const formatViews = (views: number) => {
    if (views >= 1000000) {
      return `${(views / 1000000).toFixed(1)}M`;
    } else if (views >= 1000) {
      return `${(views / 1000).toFixed(1)}K`;
    }
    return views.toString();
  };

  // Format date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  };

  // If user is not authenticated, show auth forms
  if (!currentUser) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center p-4">
        <div className="w-full max-w-md bg-white rounded-lg shadow-lg overflow-hidden border border-gray-200">
          <div className="p-8">
            <div className="flex justify-center mb-6">
              <div className="bg-red-600 w-16 h-16 rounded-full flex items-center justify-center">
                <Play className="text-white" size={32} />
              </div>
            </div>
            <h2 className="text-2xl font-bold text-center text-gray-800 mb-2">
              {isLogin ? "Sign in to YouTube Clone" : "Create your account"}
            </h2>
            <p className="text-gray-600 text-center mb-8">
              {isLogin ? "Access all your favorite videos" : "Join our community today"}
            </p>
            
            <form onSubmit={handleAuthSubmit} className="space-y-4">
              {!isLogin && (
                <div>
                  <label htmlFor="username" className="block text-gray-700 mb-2">Username</label>
                  <input
                    id="username"
                    type="text"
                    value={authForm.username}
                    onChange={(e) => setAuthForm({...authForm, username: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    required={!isLogin}
                  />
                </div>
              )}
              <div>
                <label htmlFor="email" className="block text-gray-700 mb-2">Email</label>
                <input
                  id="email"
                  type="email"
                  value={authForm.email}
                  onChange={(e) => setAuthForm({...authForm, email: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  required
                />
              </div>
              <div>
                <label htmlFor="password" className="block text-gray-700 mb-2">Password</label>
                <input
                  id="password"
                  type="password"
                  value={authForm.password}
                  onChange={(e) => setAuthForm({...authForm, password: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  required
                />
              </div>
              <button 
                type="submit" 
                className="w-full py-3 bg-red-600 hover:bg-red-700 rounded-lg text-white font-medium transition duration-300 mt-4"
              >
                {isLogin ? "Sign In" : "Create Account"}
              </button>
            </form>
            
            <div className="mt-6 text-center">
              <p className="text-gray-600">
                {isLogin ? "Don't have an account? " : "Already have an account? "}
                <button
                  onClick={() => setIsLogin(!isLogin)}
                  className="text-red-600 hover:text-red-800 font-medium"
                >
                  {isLogin ? "Create account" : "Sign in"}
                </button>
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading videos...</p>
        </div>
      </div>
    );
  }

  // Main app content
  return (
    <div className="min-h-screen bg-white flex flex-col">
      {/* Header */}
      <header className="sticky top-0 z-50 bg-white border-b border-gray-200">
        <div className="flex items-center justify-between px-4 py-3">
          <div className="flex items-center">
            <div className="flex items-center">
              <div className="bg-red-600 w-10 h-10 rounded-full flex items-center justify-center">
                <Play className="text-white" size={20} />
              </div>
              <span className="ml-2 text-xl font-bold text-gray-800">YouTube Clone</span>
            </div>
            
            <div className="hidden md:flex items-center ml-10">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-96 px-4 py-2 pl-10 border border-gray-300 rounded-full text-gray-800 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                />
                <Search className="absolute left-3 top-2.5 text-gray-500" size={20} />
              </div>
              <button className="ml-2 p-2 bg-gray-100 hover:bg-gray-200 rounded-full">
                <Search size={20} className="text-gray-600" />
              </button>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            <button 
              className="hidden md:flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-full"
              onClick={() => {
                setCurrentVideo(null);
                setActiveTab("home");
                setSearchQuery("");
              }}
            >
              <Home size={20} />
            </button>
            
            <button 
              className="hidden md:flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-full"
              onClick={() => document.getElementById('upload-modal')?.classList.remove('hidden')}
            >
              <Upload size={20} />
            </button>
            
            <div className="flex items-center">
              <div className="bg-gray-200 w-8 h-8 rounded-full flex items-center justify-center">
                <User size={20} className="text-gray-600" />
              </div>
              <button 
                onClick={handleLogout}
                className="ml-2 hidden md:flex items-center text-gray-700 hover:bg-gray-100 px-3 py-2 rounded-full"
              >
                <LogOut size={16} className="mr-1" />
                <span>Sign out</span>
              </button>
            </div>
            
            <button className="md:hidden p-2">
              <Menu size={24} className="text-gray-600" />
            </button>
          </div>
        </div>
        
        {/* Mobile search */}
        <div className="px-4 pb-3 md:hidden">
          <div className="relative">
            <input
              type="text"
              placeholder="Search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-4 py-2 pl-10 border border-gray-300 rounded-full text-gray-800 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent"
            />
            <Search className="absolute left-3 top-2.5 text-gray-500" size={20} />
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="border-b border-gray-200">
        <div className="container mx-auto px-4">
          <div className="flex space-x-8">
            <button
              className={`py-3 px-1 border-b-2 font-medium text-sm ${
                activeTab === "home"
                  ? "border-red-600 text-red-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
              onClick={() => {
                setActiveTab("home");
                setCurrentVideo(null);
              }}
            >
              Home
            </button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <main className="flex-grow container mx-auto px-4 py-6">
        {activeTab === "watch" && currentVideo ? (
          // Video player view
          <div className="max-w-6xl mx-auto">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2">
                <div className="bg-black rounded-lg overflow-hidden">
                  <video 
                    ref={videoRef}
                    src={currentVideo.url}
                    controls
                    className="w-full aspect-video"
                  />
                </div>
                
                <div className="mt-4">
                  <h1 className="text-xl font-bold text-gray-900">{currentVideo.title}</h1>
                  <div className="flex flex-wrap items-center justify-between mt-3">
                    <div className="flex items-center">
                      <div className="bg-gray-200 w-10 h-10 rounded-full flex items-center justify-center">
                        <User size={20} className="text-gray-600" />
                      </div>
                      <div className="ml-3">
                        <p className="font-medium text-gray-900">{currentVideo.uploader}</p>
                        <p className="text-sm text-gray-600">
                          {formatViews(currentVideo.views)} views • {formatDate(currentVideo.created_at)}
                        </p>
                      </div>
                    </div>
                    <div className="flex space-x-2 mt-4 md:mt-0">
                      <button className="flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">
                        <Heart className="mr-2" size={20} />
                        {formatViews(currentVideo.likes)}
                      </button>
                      <button className="flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700">
                        <Share className="mr-2" size={20} />
                        Share
                      </button>
                    </div>
                  </div>
                  
                  <div className="mt-4 p-4 bg-gray-100 rounded-lg">
                    <p className="font-medium text-gray-900">
                      {formatViews(currentVideo.views)} views • {formatDate(currentVideo.created_at)}
                    </p>
                    <p className="mt-2 text-gray-700">{currentVideo.description}</p>
                  </div>
                </div>
              </div>
              
              <div className="lg:col-span-1">
                <h2 className="text-lg font-bold text-gray-900 mb-4">Related Videos</h2>
                <div className="space-y-4">
                  {videos
                    .filter(v => v.id !== currentVideo.id)
                    .slice(0, 5)
                    .map(video => (
                      <div 
                        key={video.id}
                        className="flex cursor-pointer group"
                        onClick={() => playVideo(video)}
                      >
                        <div className="relative w-40 flex-shrink-0">
                          <img 
                            src={video.thumbnail} 
                            alt={video.title} 
                            className="w-full h-24 object-cover rounded"
                          />
                          <span className="absolute bottom-1 right-1 bg-black bg-opacity-80 text-xs text-white px-1 rounded">
                            {video.duration}
                          </span>
                        </div>
                        <div className="ml-3">
                          <h3 className="font-medium line-clamp-2 text-gray-900 group-hover:text-red-600">
                            {video.title}
                          </h3>
                          <p className="text-sm text-gray-600 mt-1">{video.uploader}</p>
                          <p className="text-xs text-gray-500">
                            {formatViews(video.views)} views • {formatDate(video.created_at)}
                          </p>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        ) : (
          // Video grid view
          <div>
            <div className="flex justify-between items-center mb-6">
              <h1 className="text-xl font-bold text-gray-900">All Videos</h1>
              <div className="flex space-x-2">
                <button 
                  className="flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700"
                  onClick={() => document.getElementById('upload-modal')?.classList.remove('hidden')}
                >
                  <Upload className="mr-2" size={16} />
                  Upload
                </button>
              </div>
            </div>
            
            {getFilteredVideos().length === 0 ? (
              <div className="text-center py-12">
                <p className="text-lg text-gray-600">No videos found</p>
                <button 
                  className="mt-4 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700"
                  onClick={() => setSearchQuery("")}
                >
                  Clear Search
                </button>
              </div>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {getFilteredVideos().map(video => (
                  <div 
                    key={video.id} 
                    className="cursor-pointer group"
                    onClick={() => playVideo(video)}
                  >
                    <div className="relative">
                      <img 
                        src={video.thumbnail} 
                        alt={video.title} 
                        className="w-full aspect-video object-cover rounded"
                      />
                      <span className="absolute bottom-2 right-2 bg-black bg-opacity-80 text-xs text-white px-1 rounded">
                        {video.duration}
                      </span>
                    </div>
                    <div className="mt-3 flex">
                      <div className="flex-shrink-0 mr-3">
                        <div className="bg-gray-200 w-9 h-9 rounded-full flex items-center justify-center">
                          <User size={16} className="text-gray-600" />
                        </div>
                      </div>
                      <div>
                        <h3 className="font-medium line-clamp-2 text-gray-900 group-hover:text-red-600">
                          {video.title}
                        </h3>
                        <p className="text-sm text-gray-600 mt-1">{video.uploader}</p>
                        <div className="flex items-center text-xs text-gray-500 mt-1">
                          <span>{formatViews(video.views)} views</span>
                          <span className="mx-1">•</span>
                          <span>{formatDate(video.created_at)}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </main>

      {/* Upload Modal */}
      <div 
        id="upload-modal" 
        className="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
      >
        <div className="w-full max-w-2xl bg-white rounded-lg shadow-xl overflow-hidden">
          <div className="p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-gray-900">Upload Video</h2>
              <button 
                className="p-2 hover:bg-gray-100 rounded-full"
                onClick={() => document.getElementById('upload-modal')?.classList.add('hidden')}
              >
                ✕
              </button>
            </div>
            
            <form onSubmit={handleUploadSubmit} className="space-y-6">
              <div>
                <label htmlFor="title" className="block text-gray-700 mb-2">Title</label>
                <input
                  id="title"
                  type="text"
                  value={uploadForm.title}
                  onChange={(e) => setUploadForm({...uploadForm, title: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  required
                />
              </div>
              
              <div>
                <label htmlFor="description" className="block text-gray-700 mb-2">Description</label>
                <textarea
                  id="description"
                  value={uploadForm.description}
                  onChange={(e) => setUploadForm({...uploadForm, description: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  rows={4}
                />
              </div>
              
              <div>
                <label className="block text-gray-700 mb-2">Video File</label>
                <div className="flex items-center justify-center w-full">
                  <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                      <Upload className="w-8 h-8 mb-4 text-gray-400" />
                      <p className="mb-2 text-sm text-gray-500">
                        <span className="font-semibold">Click to upload</span> or drag and drop
                      </p>
                      <p className="text-xs text-gray-500">
                        MP4, MOV, AVI (MAX. 100MB)
                      </p>
                    </div>
                    <input 
                      type="file" 
                      className="hidden" 
                      accept="video/*"
                      onChange={handleFileChange}
                      required
                    />
                  </label>
                </div>
                {uploadForm.file && (
                  <p className="text-sm text-gray-600 mt-2">
                    Selected: {uploadForm.file.name}
                  </p>
                )}
              </div>
              
              <div className="flex justify-end space-x-3">
                <button 
                  type="button"
                  className="px-4 py-2 border border-gray-300 hover:bg-gray-100 rounded-lg text-gray-700"
                  onClick={() => document.getElementById('upload-modal')?.classList.add('hidden')}
                >
                  Cancel
                </button>
                <button 
                  type="submit" 
                  className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-white font-medium"
                  disabled={isUploading}
                >
                  {isUploading ? "Uploading..." : "Upload"}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}
